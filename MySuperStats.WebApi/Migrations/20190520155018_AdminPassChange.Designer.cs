// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySuperStats.WebApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MySuperStats.WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190520155018_AdminPassChange")]
    partial class AdminPassChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CustomFramework.WebApiUtils.Identity.Models.ClientApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientApplicationCode")
                        .IsRequired()
                        .HasColumnName("client_application_code")
                        .HasMaxLength(6);

                    b.Property<string>("ClientApplicationName")
                        .IsRequired()
                        .HasColumnName("client_application_name")
                        .HasMaxLength(20);

                    b.Property<string>("ClientApplicationPassword")
                        .IsRequired()
                        .HasColumnName("client_application_password")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("security_stamp")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_client_applications");

                    b.HasIndex("ClientApplicationCode")
                        .HasName("ix_client_applications_client_application_code");

                    b.HasIndex("ClientApplicationName")
                        .HasName("ix_client_applications_client_application_name");

                    b.HasIndex("Status")
                        .HasName("ix_client_applications_status");

                    b.HasIndex("ClientApplicationCode", "ClientApplicationPassword")
                        .HasName("ix_client_applications_client_application_code_client_applicat~");

                    b.ToTable("client_applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientApplicationCode = "web",
                            ClientApplicationName = "web",
                            ClientApplicationPassword = "8ohVCPHTYZ3pYrhIBhLYSyiDkYbiKiA7AcRpvkuIOls=",
                            CreateDateTime = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUserId = 1,
                            SecurityStamp = "nFOhCb4zVdFj8N/aJxnIVA==",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.ToTable("role_claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "OnlySystemAdmin",
                            ClaimValue = "true",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_user_logins_user_id");

                    b.ToTable("user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.BasketballStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Assist")
                        .HasColumnName("assist")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<decimal>("Interrupt")
                        .HasColumnName("interrupt")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("LooseBall")
                        .HasColumnName("loose_ball")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MatchId")
                        .HasColumnName("match_id");

                    b.Property<decimal>("MissingOnePoint")
                        .HasColumnName("missing_one_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MissingTwoPoint")
                        .HasColumnName("missing_two_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("OnePoint")
                        .HasColumnName("one_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<decimal>("Rebound")
                        .HasColumnName("rebound")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<decimal>("StealBall")
                        .HasColumnName("steal_ball")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id");

                    b.Property<decimal>("TwoPoint")
                        .HasColumnName("two_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_basketball_stats");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_basketball_stats_create_user_id");

                    b.HasIndex("PlayerId")
                        .HasName("ix_basketball_stats_player_id");

                    b.HasIndex("Status")
                        .HasName("ix_basketball_stats_status");

                    b.HasIndex("TeamId")
                        .HasName("ix_basketball_stats_team_id");

                    b.HasIndex("MatchId", "PlayerId", "TeamId")
                        .HasName("ix_basketball_stats_match_id_player_id_team_id");

                    b.ToTable("basketball_stats");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.FootballStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Assist")
                        .HasColumnName("assist")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ConcedeGoal")
                        .HasColumnName("concede_goal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<decimal>("Goal")
                        .HasColumnName("goal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MatchId")
                        .HasColumnName("match_id");

                    b.Property<decimal>("MissedPenalty")
                        .HasColumnName("missed_penalty")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("OwnGoal")
                        .HasColumnName("own_goal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PenaltyScore")
                        .HasColumnName("penalty_score")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<decimal>("SaveGoal")
                        .HasColumnName("save_goal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_football_stats");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_football_stats_create_user_id");

                    b.HasIndex("PlayerId")
                        .HasName("ix_football_stats_player_id");

                    b.HasIndex("Status")
                        .HasName("ix_football_stats_status");

                    b.HasIndex("TeamId")
                        .HasName("ix_football_stats_team_id");

                    b.HasIndex("MatchId", "PlayerId", "TeamId")
                        .HasName("ix_football_stats_match_id_player_id_team_id");

                    b.ToTable("football_stats");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwayTeamId")
                        .HasColumnName("away_team_id");

                    b.Property<decimal>("AwayTeamScore")
                        .HasColumnName("away_team_score");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnName("duration_in_minutes");

                    b.Property<int>("HomeTeamId")
                        .HasColumnName("home_team_id");

                    b.Property<decimal>("HomeTeamScore")
                        .HasColumnName("home_team_score");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnName("match_date");

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<string>("VideoLink")
                        .HasColumnName("video_link")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.HasIndex("AwayTeamId")
                        .HasName("ix_matches_away_team_id");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_matches_create_user_id");

                    b.HasIndex("HomeTeamId")
                        .HasName("ix_matches_home_team_id");

                    b.HasIndex("Status")
                        .HasName("ix_matches_status");

                    b.HasIndex("MatchDate", "Order")
                        .HasName("ix_matches_match_date_order");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.MatchGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnName("group_name")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_match_groups");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_match_groups_create_user_id");

                    b.HasIndex("GroupName")
                        .HasName("ix_match_groups_group_name");

                    b.HasIndex("Status")
                        .HasName("ix_match_groups_status");

                    b.ToTable("match_groups");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.MatchGroupPlayer", b =>
                {
                    b.Property<int>("MatchGroupId")
                        .HasColumnName("match_group_id");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("MatchGroupId", "PlayerId")
                        .HasName("pk_match_group_players");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_match_group_players_create_user_id");

                    b.HasIndex("PlayerId")
                        .HasName("ix_match_group_players_player_id");

                    b.HasIndex("Status")
                        .HasName("ix_match_group_players_status");

                    b.ToTable("match_group_players");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.MatchGroupTeam", b =>
                {
                    b.Property<int>("MatchGroupId")
                        .HasColumnName("match_group_id");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("MatchGroupId", "TeamId")
                        .HasName("pk_match_group_teams");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_match_group_teams_create_user_id");

                    b.HasIndex("Status")
                        .HasName("ix_match_group_teams_status");

                    b.HasIndex("TeamId")
                        .HasName("ix_match_group_teams_team_id");

                    b.ToTable("match_group_teams");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_players_create_user_id");

                    b.HasIndex("Status")
                        .HasName("ix_players_status");

                    b.ToTable("players");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f24c022c-5386-48c1-b9c7-5abd674b182f",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2cd35c1b-e0ec-4dc1-a5dd-faa82c100dc0",
                            Name = "Player",
                            NormalizedName = "Player",
                            Status = 1
                        });
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_teams_create_user_id");

                    b.HasIndex("Name")
                        .HasName("ix_teams_name");

                    b.HasIndex("Status")
                        .HasName("ix_teams_status");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .HasColumnName("surname");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1982, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ca40583b-394d-48a0-879e-c11a21da1aeb",
                            Email = "yunusemre@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "YUNUS EMRE",
                            LockoutEnabled = true,
                            NormalizedEmail = "YUNUSEMRE@GMAIL.COM",
                            NormalizedUserName = "YUNUSEMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF8ox4odFYBEgV+2mBcGv8jw4KXJKnjayRE9pJ91NG8Yp+9uSVMx6QU7TP2M9MOCGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ABQONVFKVTNPYSRLSGOFKH5KNSVIANUW",
                            Status = 0,
                            Surname = "KIRKANAHTAR",
                            TwoFactorEnabled = false,
                            UserName = "yunusemre@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.BasketballStat", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.Match", "Match")
                        .WithMany("BasketballStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_basketball_stats_matches_match_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Player", "Player")
                        .WithMany("BasketballStats")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_basketball_stats_players_player_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Team", "Team")
                        .WithMany("BasketballStats")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_basketball_stats_teams_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.FootballStat", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.Match", "Match")
                        .WithMany("FootballStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_football_stats_matches_match_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Player", "Player")
                        .WithMany("FootballStats")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_football_stats_players_player_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Team", "Team")
                        .WithMany("FootballStats")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_football_stats_teams_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Match", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .HasConstraintName("fk_matches_teams_away_team_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .HasConstraintName("fk_matches_teams_home_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.MatchGroupPlayer", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.MatchGroup", "MatchGroup")
                        .WithMany("MatchGroupPlayers")
                        .HasForeignKey("MatchGroupId")
                        .HasConstraintName("fk_match_group_players_match_groups_match_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Player", "Player")
                        .WithMany("MatchGroupPlayers")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_match_group_players_players_player_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.MatchGroupTeam", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.MatchGroup", "MatchGroup")
                        .WithMany("MatchGroupTeams")
                        .HasForeignKey("MatchGroupId")
                        .HasConstraintName("fk_match_group_teams_match_groups_match_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Team", "Team")
                        .WithMany("MatchGroupTeams")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_match_group_teams_teams_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
