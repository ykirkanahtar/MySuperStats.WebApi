// <auto-generated />
using System;
using MySuperStats.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MySuperStats.WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20181219104954_EditMatchTableAddScoresFields")]
    partial class EditMatchTableAddScoresFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MySuperStats.WebApi.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwayTeamId")
                        .HasColumnName("away_team_id");

                    b.Property<decimal>("AwayTeamScore")
                        .HasColumnName("away_team_score");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnName("duration_in_minutes");

                    b.Property<int>("HomeTeamId")
                        .HasColumnName("home_team_id");

                    b.Property<decimal>("HomeTeamScore")
                        .HasColumnName("home_team_score");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnName("match_date");

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<string>("VideoLink")
                        .HasColumnName("video_link")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.HasIndex("AwayTeamId")
                        .HasName("ix_matches_away_team_id");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_matches_create_user_id");

                    b.HasIndex("HomeTeamId")
                        .HasName("ix_matches_home_team_id");

                    b.HasIndex("Status")
                        .HasName("ix_matches_status");

                    b.HasIndex("MatchDate", "Order")
                        .IsUnique()
                        .HasName("ix_matches_match_date_order");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_players_create_user_id");

                    b.HasIndex("Status")
                        .HasName("ix_players_status");

                    b.ToTable("players");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Assist")
                        .HasColumnName("assist")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<decimal>("Interrupt")
                        .HasColumnName("interrupt")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("LooseBall")
                        .HasColumnName("loose_ball")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MatchId")
                        .HasColumnName("match_id");

                    b.Property<decimal>("MissingOnePoint")
                        .HasColumnName("missing_one_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MissingTwoPoint")
                        .HasColumnName("missing_two_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("OnePoint")
                        .HasColumnName("one_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<decimal>("Rebound")
                        .HasColumnName("rebound")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<decimal>("StealBall")
                        .HasColumnName("steal_ball")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id");

                    b.Property<decimal>("TwoPoint")
                        .HasColumnName("two_point")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_stats");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_stats_create_user_id");

                    b.HasIndex("PlayerId")
                        .HasName("ix_stats_player_id");

                    b.HasIndex("Status")
                        .HasName("ix_stats_status");

                    b.HasIndex("TeamId")
                        .HasName("ix_stats_team_id");

                    b.HasIndex("MatchId", "PlayerId", "TeamId")
                        .IsUnique()
                        .HasName("ix_stats_match_id_player_id_team_id");

                    b.ToTable("stats");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CreateUserId")
                        .HasName("ix_teams_create_user_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_teams_name");

                    b.HasIndex("Status")
                        .HasName("ix_teams_status");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_applications");

                    b.HasIndex("Name")
                        .HasName("ix_applications_name");

                    b.HasIndex("Status")
                        .HasName("ix_applications_status");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_application_users");

                    b.HasIndex("Status")
                        .HasName("ix_application_users_status");

                    b.HasIndex("ApplicationId", "Status")
                        .HasName("ix_application_users_application_id_status");

                    b.HasIndex("UserId", "Status")
                        .HasName("ix_application_users_user_id_status");

                    b.ToTable("application_users");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<string>("CustomClaim")
                        .IsRequired()
                        .HasColumnName("custom_claim")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_claims");

                    b.HasIndex("CustomClaim")
                        .HasName("ix_claims_custom_claim");

                    b.HasIndex("Status")
                        .HasName("ix_claims_status");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ClientApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientApplicationCode")
                        .IsRequired()
                        .HasColumnName("client_application_code")
                        .HasMaxLength(6);

                    b.Property<string>("ClientApplicationName")
                        .IsRequired()
                        .HasColumnName("client_application_name")
                        .HasMaxLength(20);

                    b.Property<string>("ClientApplicationPassword")
                        .IsRequired()
                        .HasColumnName("client_application_password")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_client_applications");

                    b.HasIndex("ClientApplicationCode")
                        .HasName("ix_client_applications_client_application_code");

                    b.HasIndex("ClientApplicationName")
                        .HasName("ix_client_applications_client_application_name");

                    b.HasIndex("Status")
                        .HasName("ix_client_applications_status");

                    b.HasIndex("ClientApplicationCode", "ClientApplicationPassword")
                        .HasName("ix_client_applications_client_application_code_client_applicat~");

                    b.ToTable("client_applications");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ClientApplicationUtil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientApplicationId")
                        .HasColumnName("client_application_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("SpecialValue")
                        .IsRequired()
                        .HasColumnName("special_value")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_client_application_utils");

                    b.HasIndex("ClientApplicationId")
                        .IsUnique()
                        .HasName("ix_client_application_utils_client_application_id");

                    b.HasIndex("Status")
                        .HasName("ix_client_application_utils_status");

                    b.ToTable("client_application_utils");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(255);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("RoleName")
                        .HasName("ix_roles_role_name");

                    b.HasIndex("Status")
                        .HasName("ix_roles_status");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<int>("ClaimId")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("ClaimId")
                        .HasName("ix_role_claims_claim_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.HasIndex("Status")
                        .HasName("ix_role_claims_status");

                    b.HasIndex("ApplicationId", "RoleId", "ClaimId")
                        .HasName("ix_role_claims_application_id_role_id_claim_id");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleEntityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<bool>("CanCreate")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanSelect")
                        .HasColumnName("can_select");

                    b.Property<bool>("CanUpdate")
                        .HasColumnName("can_update");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnName("entity")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id")
                        .HasName("pk_role_entity_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_entity_claims_role_id");

                    b.HasIndex("Status")
                        .HasName("ix_role_entity_claims_status");

                    b.HasIndex("ApplicationId", "RoleId", "Entity", "CanCreate")
                        .HasName("ix_role_entity_claims_application_id_role_id_entity_can_create");

                    b.HasIndex("ApplicationId", "RoleId", "Entity", "CanDelete")
                        .HasName("ix_role_entity_claims_application_id_role_id_entity_can_delete");

                    b.HasIndex("ApplicationId", "RoleId", "Entity", "CanSelect")
                        .HasName("ix_role_entity_claims_application_id_role_id_entity_can_select");

                    b.HasIndex("ApplicationId", "RoleId", "Entity", "CanUpdate")
                        .HasName("ix_role_entity_claims_application_id_role_id_entity_can_update");

                    b.ToTable("role_entity_claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("access_failed_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("EmailConfirmCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email_confirm_code")
                        .HasMaxLength(6)
                        .HasDefaultValue("232007");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("Lockout")
                        .HasColumnName("lockout");

                    b.Property<DateTime?>("LockoutEndDateTime")
                        .HasColumnName("lockout_end_date_time")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasMaxLength(25);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ApplicationId")
                        .HasName("ix_users_application_id");

                    b.HasIndex("Email")
                        .HasName("ix_users_email");

                    b.HasIndex("Status")
                        .HasName("ix_users_status");

                    b.HasIndex("UserName")
                        .HasName("ix_users_user_name");

                    b.HasIndex("UserName", "Password")
                        .HasName("ix_users_user_name_password");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<int>("ClaimId")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("ClaimId")
                        .HasName("ix_user_claims_claim_id");

                    b.HasIndex("Status")
                        .HasName("ix_user_claims_status");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.HasIndex("ApplicationId", "UserId", "ClaimId")
                        .HasName("ix_user_claims_application_id_user_id_claim_id");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserEntityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<bool>("CanCreate")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanSelect")
                        .HasColumnName("can_select");

                    b.Property<bool>("CanUpdate")
                        .HasColumnName("can_update");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnName("entity")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_entity_claims");

                    b.HasIndex("Status")
                        .HasName("ix_user_entity_claims_status");

                    b.HasIndex("UserId")
                        .HasName("ix_user_entity_claims_user_id");

                    b.HasIndex("ApplicationId", "UserId", "Entity", "CanCreate")
                        .HasName("ix_user_entity_claims_application_id_user_id_entity_can_create");

                    b.HasIndex("ApplicationId", "UserId", "Entity", "CanDelete")
                        .HasName("ix_user_entity_claims_application_id_user_id_entity_can_delete");

                    b.HasIndex("ApplicationId", "UserId", "Entity", "CanSelect")
                        .HasName("ix_user_entity_claims_application_id_user_id_entity_can_select");

                    b.HasIndex("ApplicationId", "UserId", "Entity", "CanUpdate")
                        .HasName("ix_user_entity_claims_application_id_user_id_entity_can_update");

                    b.ToTable("user_entity_claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.HasIndex("Status")
                        .HasName("ix_user_roles_status");

                    b.HasIndex("UserId", "Status")
                        .HasName("ix_user_roles_user_id_status");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserUtil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("create_user_id");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnName("delete_user_id");

                    b.Property<string>("SpecialValue")
                        .IsRequired()
                        .HasColumnName("special_value")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_utils");

                    b.HasIndex("Status")
                        .HasName("ix_user_utils_status");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("ix_user_utils_user_id");

                    b.ToTable("user_utils");
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Match", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .HasConstraintName("fk_matches_teams_away_team_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .HasConstraintName("fk_matches_teams_home_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MySuperStats.WebApi.Models.Stat", b =>
                {
                    b.HasOne("MySuperStats.WebApi.Models.Match", "Match")
                        .WithMany("Stats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_stats_matches_match_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Player", "Player")
                        .WithMany("Stats")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_stats_players_player_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MySuperStats.WebApi.Models.Team", "Team")
                        .WithMany("Stats")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_stats_teams_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ApplicationUser", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Application", "Application")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_application_users_applications_application_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_users_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ClientApplicationUtil", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.ClientApplication", "ClientApplication")
                        .WithOne("ClientApplicationUtil")
                        .HasForeignKey("CustomFramework.WebApiUtils.Authorization.Models.ClientApplicationUtil", "ClientApplicationId")
                        .HasConstraintName("fk_client_application_utils_client_applications_client_applica~")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Application", "Application")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_role_claims_applications_application_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Claim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_role_claims_claims_claim_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleEntityClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Application", "Application")
                        .WithMany("RoleEntityClaims")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_role_entity_claims_applications_application_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Role", "Role")
                        .WithMany("RoleEntityClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_entity_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.User", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Application")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_users_applications_application_id");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Application", "Application")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_user_claims_applications_application_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_user_claims_claims_claim_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserEntityClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Application", "Application")
                        .WithMany("UserEntityClaims")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_user_entity_claims_applications_application_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithMany("UserEntityClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_entity_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserRole", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserUtil", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithOne("UserUtil")
                        .HasForeignKey("CustomFramework.WebApiUtils.Authorization.Models.UserUtil", "UserId")
                        .HasConstraintName("fk_user_utils_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
